package P1;

public class P1_Driver {
	
	private Search search = new Search();
	
	private final int[] ARRAY_KEY_100 = {4, 5, 6, 7, 8, 11, 12, 15, 17, 18, 20, 22, 23, 24, 25, 28, 29, 30, 31, 34, 35, 36, 39, 41, 43, 45, 52, 53, 55, 56, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 90, 92, 93, 94, 95, 97, 102, 103, 105, 107, 108, 112, 113, 114, 122, 124, 125, 129, 130, 131, 132, 133, 136, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 167, 170, 171, 172, 173, 175, 176, 177, 182, 183, 184, 185, 186, 191, 192, 193};
	private final int[] ARRAY_KEY_500 = {5, 10, 18, 28, 40, 43, 70, 113, 128, 135, 136, 150, 155, 158, 161, 166, 181, 197, 217, 229, 246, 273, 281, 285, 289, 291, 302, 316, 318, 321, 323, 361, 366, 375, 383, 385, 386, 402, 413, 419, 424, 425, 431, 438, 465, 478, 485, 494, 496, 498, 501, 502, 506, 507, 508, 509, 514, 515, 519, 524, 525, 526, 527, 528, 534, 537, 541, 544, 546, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 570, 572, 574, 576, 577, 578, 581, 582, 585, 586, 589, 591, 595, 596, 598, 599};
	private final int[] ARRAY_KEY_1000= {2, 17, 31, 38, 102, 112, 118, 121, 153, 212, 213, 258, 276, 278, 302, 333, 348, 361, 384, 389, 400, 424, 432, 458, 506, 521, 553, 554, 559, 573, 653, 667, 680, 712, 740, 759, 795, 832, 845, 869, 874, 883, 888, 894, 896, 910, 918, 927, 929, 974, 1003, 1033, 1040, 1043, 1089, 1091, 1155, 1160, 1161, 1169, 1185, 1204, 1225, 1246, 1275, 1284, 1285, 1302, 1322, 1326, 1367, 1370, 1420, 1428, 1444, 1489, 1503, 1510, 1529, 1539, 1541, 1589, 1591, 1611, 1617, 1669, 1679, 1684, 1721, 1772, 1801, 1817, 1844, 1858, 1908, 1920, 1923, 1936, 1943, 1970 };
	private final int[] ARRAY_KEY_5000={43, 70, 138, 180, 459, 569, 577, 638, 689, 787, 913, 1001, 1035, 1066, 1165, 1191, 1213, 1238, 1247, 1252, 1487, 1639, 1646, 1842, 2185, 2243, 2277, 2436, 2450, 2514, 2684, 2742, 2795, 2882, 2929, 2954, 2984, 3088, 3123, 3157, 3436, 3546, 3723, 3743, 3849, 3870, 4342, 4473, 4482, 4979, 5026, 5032, 5099, 5144, 5154, 5159, 5167, 5189, 5198, 5222, 5223, 5239, 5248, 5272, 5297, 5301, 5390, 5400, 5432, 5438, 5481, 5502, 5508, 5540, 5573, 5602, 5676, 5697, 5709, 5720, 5726, 5748, 5760, 5761, 5765, 5767, 5803, 5816, 5822, 5863, 5879, 5884, 5895, 5903, 5935, 5946, 5950, 5954, 5969, 5994};
	private final int[] ARRAY_KEY_10000={468, 745, 818, 938, 1274, 1423, 1819, 1962, 2097, 2195, 2271, 2486, 2611, 2692, 2717, 3092, 3558, 3577, 3801, 3802, 4305, 4378, 4577, 4596, 4698, 5124, 5417, 5443, 5455, 5801, 6583, 6589, 6710, 6721, 6905, 7113, 7155, 7524, 7618, 7862, 7942, 8133, 8226, 8301, 9000, 9061, 9064, 9414, 9591, 9762, 10009, 10052, 10064, 10095, 10101, 10116, 10156, 10172, 10176, 10178, 10193, 10221, 10269, 10273, 10300, 10302, 10326, 10330, 10425, 10430, 10439, 10449, 10484, 10512, 10516, 10535, 10567, 10568, 10618, 10643, 10666, 10668, 10690, 10708, 10732, 10762, 10770, 10805, 10823, 10874, 10884, 10896, 10899, 10914, 10927, 10930, 10931, 10957, 10970, 10989};
	private final int[] ARRAY_KEY_25000= {115, 364, 1065, 1084, 2430, 4350, 4857, 5378, 5691, 5701, 5709, 6986, 7042, 7401, 9662, 9715, 9739, 10028, 10131, 10445, 10660, 10969, 11201, 12596, 12886, 13056, 13543, 13879, 14071, 14522, 15767, 15994, 16901, 17060, 17241, 17880, 18198, 18461, 19414, 19622, 19661, 19915, 20994, 21626, 22244, 22846, 22866, 23976, 24242, 24421, 25011, 25044, 25088, 25092, 25097, 25129, 25131, 25149, 25153, 25176, 25202, 25214, 25255, 25287, 25294, 25349, 25364, 25377, 25394, 25411, 25465, 25518, 25531, 25541, 25553, 25555, 25593, 25623, 25625, 25627, 25638, 25664, 25675, 25690, 25730, 25735, 25774, 25779, 25794, 25810, 25813, 25834, 25839, 25843, 25852, 25887, 25899, 25917, 25959, 25990 };
	private final int[] ARRAY_KEY_50000= {872, 1617, 2353, 3560, 3898, 5614, 7186, 8670, 10491, 12634, 13352, 14117, 17294, 17539, 19728, 20317, 21620, 22464, 23480, 24487, 26137, 26605, 26607, 26860, 27209, 27906, 29504, 29677, 31410, 32020, 34491, 34687, 35964, 36225, 36933, 37106, 37150, 37373, 38479, 39074, 39905, 41127, 41908, 42438, 43994, 44688, 44740, 45076, 46772, 49712, 50028, 50069, 50091, 50149, 50182, 50215, 50217, 50234, 50254, 50256, 50260, 50307, 50328, 50333, 50355, 50384, 50393, 50411, 50452, 50467, 50469, 50507, 50547, 50548, 50564, 50605, 50609, 50623, 50634, 50696, 50697, 50706, 50714, 50715, 50723, 50724, 50726, 50737, 50744, 50752, 50780, 50782, 50829, 50833, 50868, 50889, 50930, 50944, 50961, 50963};	
	private final int[] ARRAY_KEY_75000= {5690, 5744, 6342, 10022, 11643, 12480, 12730, 13534, 14028, 14625, 15809, 16805, 18696, 19609, 22950, 27787, 30131, 31120, 31449, 31690, 34927, 35990, 36660, 38208, 38614, 39041, 39151, 39678, 44283, 44610, 44986, 45349, 46628, 47494, 51165, 54915, 55473, 57469, 58745, 58904, 61134, 62747, 63137, 63546, 63735, 65100, 65193, 67461, 68845, 74876, 75002, 75014, 75034, 75036, 75069, 75086, 75088, 75090, 75113, 75122, 75130, 75146, 75153, 75224, 75268, 75320, 75356, 75361, 75364, 75415, 75417, 75425, 75431, 75452, 75460, 75477, 75479, 75485, 75496, 75506, 75513, 75554, 75561, 75585, 75599, 75611, 75630, 75678, 75710, 75719, 75775, 75776, 75832, 75842, 75860, 75869, 75886, 75901, 75944, 75962};
	private final int[] ARRAY_KEY_100000= {618, 4465, 5545, 8453, 8609, 10540, 13206, 13655, 16817, 20170, 20256, 22036, 24657, 24658, 26370, 26995, 32392, 35750, 38152, 39120, 44151, 44775, 45829, 46865, 47761, 47853, 49899, 51935, 52667, 53960, 55229, 56730, 59319, 60889, 62700, 64836, 67448, 67539, 74860, 77921, 78180, 82285, 85490, 85937, 88565, 89813, 95786, 96608, 97863, 99425, 100021, 100545, 100595, 100859, 101012, 101048, 101235, 101290, 101463, 101469, 101622, 101753, 102717, 102904, 103425, 103768, 103862, 104118, 104160, 104227, 104303, 104304, 104392, 105077, 105182, 105292, 105592, 105608, 105624, 105863, 106018, 106095, 106255, 106291, 106398, 106456, 106912, 107033, 107727, 107970, 108153, 108409, 108672, 108799, 109056, 109152, 109360, 109740, 109938, 109964};
	private final int[] ARRAY_KEY_300000= {1467, 7904, 22248, 31305, 32379, 32908, 45195, 52408, 58821, 59145, 72220, 92060, 92360, 95048, 96878, 114506, 114872, 116380, 162136, 168268, 170193, 173572, 173769, 175589, 180345, 181005, 190738, 192154, 197097, 197214, 198492, 204546, 206510, 209985, 216247, 225551, 225666, 227950, 236144, 237426, 244169, 245260, 258680, 258990, 260118, 265682, 266935, 272498, 278861, 296647, 300204, 300233, 300246, 300437, 300488, 300618, 300912, 300924, 301126, 302294, 302439, 302719, 302720, 303882, 303930, 304104, 304509, 304537, 304670, 304786, 305065, 305214, 305349, 305419, 305534, 305802, 305819, 305977, 306191, 306268, 306289, 306304, 306348, 306409, 306483, 307005, 307334, 307507, 307653, 307733, 307903, 308049, 308128, 308216, 308288, 308704, 308731, 308775, 309554, 309863};
	private final int[] ARRAY_KEY_500000= {8609, 21728, 37954, 41372, 70262, 81272, 95352, 107520, 110261, 142493, 153548, 159726, 164127, 169283, 179838, 188288, 191393, 196407, 199982, 201780, 234878, 244602, 244649, 247220, 262516, 265338, 272180, 278494, 281037, 283992, 285517, 309271, 324727, 358585, 369222, 370933, 390579, 412955, 428900, 445853, 462904, 464811, 465123, 468219, 478658, 479387, 480243, 480647, 485711, 493259, 500206, 500258, 500308, 500537, 500553, 500847, 500937, 501341, 501521, 502314, 502318, 502383, 502587, 502644, 502893, 503029, 503479, 503754, 504215, 504346, 504839, 504945, 504975, 505614, 505681, 505764, 505901, 505958, 506076, 506155, 506291, 506484, 506600, 506740, 506897, 507104, 507344, 507415, 507503, 507832, 508192, 508559, 508837, 508850, 508982, 509128, 509142, 509427, 509628, 509842 };
	private final int[] ARRAY_KEY_750000= {20148, 27641, 43163, 51942, 74477, 76522, 89019, 105224, 105277, 109378, 112319, 115930, 125152, 133961, 139165, 149265, 164089, 166512, 202163, 261087, 302966, 307364, 311723, 323799, 382860, 389442, 398037, 398372, 403490, 406005, 420376, 447577, 456180, 498526, 499361, 541336, 550121, 564976, 604992, 609060, 611624, 640090, 645636, 656516, 689355, 692092, 696794, 700363, 728926, 742305, 750140, 750250, 750369, 750516, 751003, 751116, 751857, 751883, 751978, 752019, 752578, 752585, 752945, 753079, 753121, 753356, 753415, 754956, 755600, 755940, 756251, 756274, 756375, 756464, 756709, 756856, 756879, 756893, 756917, 757056, 757092, 757216, 757310, 757361, 757460, 757865, 758157, 758189, 758368, 758396, 758588, 758641, 758877, 758968, 759140, 759522, 759572, 759617, 759808, 759863};
	private final int[] ARRAY_KEY_1000000= {63183, 75190, 80924, 113157, 115309, 118066, 139396, 172841, 185630, 199117, 210190, 219355, 229329, 312767, 397947, 409018, 415125, 422366, 438683, 439234, 456808, 473061, 477719, 526680, 530087, 551591, 561229, 573516, 576536, 631892, 681515, 708954, 809740, 809940, 840013, 848871, 857250, 862744, 876092, 877684, 886736, 899222, 902412, 915570, 919587, 920968, 957966, 961625, 971587, 987000, 1000893, 1001611, 1001635, 1002400, 1007748, 1008051, 1008988, 1010621, 1015682, 1021296, 1022663, 1024817, 1027078, 1031842, 1040951, 1043507, 1043559, 1044469, 1045537, 1048176, 1048876, 1050273, 1051912, 1055029, 1057386, 1057828, 1058865, 1059513, 1060052, 1063355, 1063395, 1064749, 1066015, 1066161, 1068212, 1071062, 1072075, 1072914, 1073279, 1080758, 1081311, 1083982, 1087205, 1089186, 1089214, 1090928, 1092262, 1093669, 1094996, 1099069 };
	
	
	public P1_Driver() {
		
		int[] sortedArray = ArrayGenerator.generate(ArrayGenerator.SIZE_1000000); 

		//System.out.println(sortedArray.length);
		for(int i = 0; i < ARRAY_KEY_1000000.length; i++) {
			//System.out.println(ARRAY_KEY_1000000[i]);
			
			System.out.println("Key#" + (i+2));
			System.out.println("LINEAR SEARCH");
			LinearSearchTest(sortedArray, ARRAY_KEY_1000000[i]);
			
			System.out.println();
			
			System.out.println("BINARY SEARCH");
			BinarySearchTest(sortedArray, ARRAY_KEY_1000000[i]);
			
			System.out.println("\n\n");
		}
	}
	
	public static void main(String[] args) {
		new P1_Driver();
	}
	
	public void LinearSearchTest(int[] sortedArray, int key) {
		boolean result;
		long startTime;
		long endTime;
		double time;
		
		startTime = System.nanoTime();
		result = search.linear(sortedArray, key);
		endTime = System.nanoTime();
		
		time = (1.0*endTime - startTime) / 1000000;
		System.out.println("Time: " + time);
		System.out.println("Found: " + result);
		
	}
	
	public void BinarySearchTest(int[] sortedArray, int key) {
		boolean result;
		long startTime;
		long endTime;
		double time;
		int initialHighIndex = sortedArray.length-1;
		
		startTime = System.nanoTime();
		result = search.binary(sortedArray, key, 0, initialHighIndex);
		endTime = System.nanoTime();
		
		time = (1.0*endTime - startTime) / 1000000;
		System.out.println("Time: " + time);
		System.out.println("Found: " + result);	
	}
	
	
	
	
	


}
